<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
	default-lazy-init="true">

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:applicationContext.properties</value>
        </property>
    </bean>
	
    <!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<!-- <context:component-scan base-package="com" use-default-filters="false">
    <context:include-filter type="regex" expression="com.*"/>
    <context:include-filter type="regex" expression="com.*.dao"/>
    <context:include-filter type="regex" expression="com.*.impl"/>    
    <context:include-filter type="regex" expression="com.*.*.dao"/>
    <context:include-filter type="regex" expression="com.*.*.impl"/>
    <context:include-filter type="regex" expression="com.*.action"/>
	</context:component-scan>
	 -->
<context:component-scan base-package="com.zf.*"/>
<!-- <bean id="c3p0dataSource" name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		& 指定连接数据库的驱动%
	    <property name="driverClass" value="${jdbc.driver}"/>
	    & 指定连接数据库的URL%
	    <property name="jdbcUrl" value="${jdbc.url}"/>
	    & 指定连接数据库的用户名%
	    <property name="user" value="${jdbc.username}"/>
	    & 指定连接数据库的密码%
	    <property name="password" value="${jdbc.password}"/>
	    & 指定连接池中保留的最大连接数. Default:15%
	    <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
	    & 指定连接池中保留的最小连接数%
	    <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
	    & 指定连接池的初始化连接数  取值应在minPoolSize 与 maxPoolSize 之间.Default:3%
	    <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
	    & 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0%
	    <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
	    & 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3%
	    <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
	    & JDBC的标准,用以控制数据源内加载的PreparedStatements数量。
	    但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0%
	    <property name="maxStatements" value="${jdbc.maxStatements}"/>
	    & 每60秒检查所有连接池中的空闲连接.Default:0 %
	    <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
	</bean>-->



	   <!-- 数据源配置,使用应用内的jdbc数据库连接池 -->
   <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

      <!-- LocalSessionFactoryBean -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				 <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.connection.autocommit">true</prop>
                <!-- hibernate4配置，与之前版本有不同 -->
               
                <!--<prop key="cache.use_query_cache">false</prop>
                <prop key="cache.use_second_level_cache">true</prop>
                <prop key="cache.region.factory_class">org.hibernate.cache.EhCacheRegionFactory</prop>
                		-->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<property name="packagesToScan">
				<list>
				<value>com.zf.domain</value>				
				</list>
		</property>
	</bean>
	<bean id="HtxManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
<property name="sessionFactory" ref="sessionFactory"/>
</bean>

<tx:advice id="txAdvice" transaction-manager="HtxManager">
<!-- the transactional semantics... -->
<tx:attributes>
<!-- all methods starting with 'get' are read-only -->
<tx:method name="get*" propagation="REQUIRED" read-only="true"/>
<!-- other methods use the default transaction settings (see below) -->
<tx:method name="*"/>
</tx:attributes>
</tx:advice>
 <aop:config >
<aop:pointcut id="ServiceOperation" expression="execution(* com.zf.serviceManagerImpl.*.*(..))"/>
<aop:advisor advice-ref="txAdvice" pointcut-ref="ServiceOperation"/>
</aop:config>
</beans>